# This workflow is intended to be called by workflows in our various pathogen
# build repos.  See workflow-templates/pathogen-repo-builds.yaml (a "starter"
# workflow) in this repo for an example of what the caller workflow looks like.
name: Pathogen repo build

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      repo:
        description: >-
          Repository name with owner (e.g. nextstrain/zika). Defaults to the
          repository of the caller workflow.
        type: string
        default: ${{ github.repository }}
        required: false

      runtime:
        description: >-
          Nextstrain runtime under which to run the build.
          Currently only supports docker, conda, and aws-batch.
          Defaults to "docker".
        type: string
        default: docker
        required: false

      env:
        description: >-
          Environment variables to set for this reusable workflow since
          environment variables in the caller workflow are not propagated to
          reusable workflows. This is expected to be a string containing YAML.

          This is easily produced, for example, by pretending
          you're writing normal nested YAML within a literal multi-line block
          scalar (introduced by "|"):

            with:
              env: |
                FOO: bar
                I_CANT_BELIEVE: "it's not YAML"
                would_you_believe: |
                  it's
                  not
                  yaml

          Do not use for secrets!  Instead, pass them via GitHub Action's
          dedicated secrets mechanism.
        type: string
        default: ""
        required: false

      cpus:
        description: >-
          Number of CPUs/cores/threads/jobs to utilize at once.
          Will be passed to the `--cpus` option for `nextstrain build` and the
          `--cores` option for Snakemake.

          See `nextstrain build` docs for more details:
          https://docs.nextstrain.org/projects/cli/page/commands/build/

          If using the "aws-batch" runtime, see the AWS Batch docs for details
          on the available CPUs for C5 instances:
          https://aws.amazon.com/ec2/instance-types/c5/
        type: number
        default: 2
        required: false

      memory:
        description: >-
          Amount of memory to make available to the build.
          Units of b, kb, mb, gb, kib, mib, gib are supported.
          Passed to the `--memory` option for `nextstrain build`.

          See `nextstrain build` docs for more details:
          https://docs.nextstrain.org/projects/cli/page/commands/build/

          If using the "aws-batch" runtime, see the AWS Batch C5 for details
          on the available memory for C5 instances:
          https://aws.amazon.com/ec2/instance-types/c5/
        type: string
        required: false

      build-args:
        description: >-
          Additional arguments to pass to Snakemake. Please remove any
          additional `--cores N` arguments and use the `cpus` input of this
          workflow.
        type: string
        default: ""
        required: false

      artifact-name:
        description: >-
          Name to use for the build output artifact uploaded at end of the workflow.

          If you're invoking this workflow multiple times from the same calling
          workflow, you should set this. Otherwise, the default "build-outputs"
          is probably fine.
        type: string
        default: build-outputs
        required: false

      artifact-paths:
        description: >-
          List of paths to include in the build output artifact uploaded
          at the end of the workflow, as a string following the format of the
          `paths` input of the `actions/upload-artifact` action.
          For example:

            with:
              artifact-paths: |
                results/
                auspice/
                logs/

          The output will always include a "build.log" file which contains log
          messages from the `nextstrain build` command. The envdir created to
          pass environment variables to the build runtime will always be
          excluded from the output to prevent secrets from being leaked.

          This is not supported for builds on AWS Batch because the workflow
          detaches from the build. Please use the `nextstrain build` command
          locally to reattach to AWS Batch builds to download outputs.
        type: string
        default: |
          auspice/
          results/
          benchmarks/
          logs/
          .snakemake/log/
        required: false

    secrets:
      AWS_ACCESS_KEY_ID:
        description: AWS access key ID, required for aws-batch runtime only
        required: false

      AWS_SECRET_ACCESS_KEY:
        description: AWS secret access key, required for aws-batch runtime only
        required: false

      GITHUB_PAT:
        description: GitHub personal access token, required for additional permissions such as dispatching cross repo workflows
        required: false

      SLACK_TOKEN:
        description: Slack Bot User OAuth Token, required for Slack notifications only
        required: false

env:
  BUILD_DIR: build-dir
  ENV_DIR: env.d

jobs:
  # workflow-context:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #   steps:
  #     - id: workflow-context
  #       uses: nextstrain/.github/actions/workflow-context@run-build-workflow
  #   outputs:
  #     repository: ${{ steps.workflow-context.outputs.repository }}
  #     sha: ${{ steps.workflow-context.outputs.sha }}

  run-build:
    # needs: workflow-context
    runs-on: ubuntu-latest
    steps:
      - name: Checkout nextstrain/.github@run-build-workflow
        uses: actions/checkout@v3
        with:
          repository: nextstrain/.github
          ref: run-build-workflow
          path: nextstrain-github

      - run: |
          mv nextstrain-github ..
          ls -l ../nextstrain-github

      - name: Setup runtime ${{ inputs.runtime }}
        uses: ../nextstrain-github/actions/setup-nextstrain-cli
        with:
          runtime: ${{ inputs.runtime }}
        # Required to set up aws-batch as default runtime
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout build repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}

      - if: inputs.env
        name: Set environment variables
        env:
          env: ${{ inputs.env }}
        run: >
          # shellcheck disable=SC2154

          echo "$env"
          | ../nextstrain-github/bin/yaml-to-envvars
          | tee -a "$GITHUB_ENV"

      - name: Set secrets as environment variables
        env:
          secrets: ${{ toJson(secrets) }}
        run: >
          # shellcheck disable=SC2154

          echo "$secrets"
          | ../nextstrain-github/bin/json-to-envvars
          | tee -a "$GITHUB_ENV"

      - name: Set build runtime environment variables
        env:
          env: ${{ inputs.env || '[]' }}
          secrets: ${{ toJson(secrets) || '' }}
        run: |
          # shellcheck disable=SC2154
          set -x

          envvars=$(echo "$env" | yq 'keys | join(" ")')
          secrets=$(echo "$secrets" | jq -r 'del(.github_token) | keys | join(" ")')

          # read exits with 1 when it encounters EOF
          read -a varnames -r -d $'\0' <<<"$envvars $secrets" || true
          ../nextstrain-github/bin/write-envdir "$ENV_DIR" "${varnames[@]}"

      - name: Run build via ${{ inputs.runtime }}
        env:
          cpus: ${{ inputs.cpus }}
          memory: ${{ inputs.memory }}
          detach: ${{ inputs.runtime == 'aws-batch' || null }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # shellcheck disable=SC2154
          set -x

          nextstrain build \
            --cpus "$cpus" \
            ${memory:+--memory="$memory"} \
            ${detach:+--detach} \
            --exec env \
            . \
              envdir "$ENV_DIR" snakemake \
              --cores "$cpus" \
              ${{ inputs.build-args }} \
          | tee build.log

      # - name: List all files
      #   run: |
      #     ls -la $BUILD_DIR/.snakemake/log

      # - if: ${{ inputs.runtime == 'aws-batch' }}
      #   name: Get AWS Batch job id
      #   id: aws-batch
      #   run: |
      #     echo "AWS_BATCH_JOB_ID=$(tail -n1 build.log | sed -nE 's/.+attach ([-a-f0-9]+).+/\1/p')" >> "$GITHUB_ENV"

      # - if: env.AWS_BATCH_JOB_ID
      #   name: Generate AWS Batch summary
      #   run: |
      #     ./bin/interpolate-env < ./text-templates/attach-aws-batch.md \
      #     > "$GITHUB_STEP_SUMMARY"

      # - if: always()
      #   id: prefix-paths
      #   name: Prefix artifact paths with ${{ env.BUILD_DIR }}/
      #   env:
      #     paths: ${{ inputs.artifact-paths }}
      #   run: |
      #     prefixed_paths=$(
      #       yq -n '
      #           strenv(paths)
      #         | trim
      #         | split("\n")
      #         | .[] |= env(BUILD_DIR) + "/" + .
      #         | join("\n")
      #       '
      #     )

      #     {
      #       echo "paths<<__EOF__"
      #       echo "$prefixed_paths"
      #       echo "__EOF__"
      #     } >> "$GITHUB_OUTPUT"

      - if: always()
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: ${{ inputs.artifact-name }}
          path: |
            build.log
            ${{ inputs.artifact-paths }}
            !${{ env.ENV_DIR }}
